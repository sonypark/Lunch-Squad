service: restaurant

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: ap-northeast-2
  environment:
    RESTAURANT_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    USER_TABLE: 'user-${opt:stage, self:provider.stage}'
    BUCKET_NAME: 'lunchsquad-${self:service}-img'
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - s3:PutObject
      Resource: '*'

resources:
  Resources:
    RestaurantsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: 'id'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'id'
            KeyType: 'HASH'
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: 'NEW_AND_OLD_IMAGES'
        TableName: ${self:provider.environment.RESTAURANT_TABLE}

    UserDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: 'userId'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'userId'
            KeyType: 'HASH'
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: 'NEW_AND_OLD_IMAGES'
        TableName: ${self:provider.environment.USER_TABLE}

    StorageBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: ${self:provider.environment.BUCKET_NAME}

    CognitoUserPoolLunchSquad:
      Type: 'AWS::Cognito::UserPool'

functions:
  addRestaurants:
    handler: api/restaurants.add
    memorySize: 128
    description: Add restaurants information.
    events:
      - http:
          path: restaurants
          method: post

  listRestaurants:
    handler: api/restaurants.list
    memorySize: 128
    description: List all restaurants
    events:
      - http:
          path: restaurants
          method: get

  restaurantDetails:
    handler: api/restaurants.get
    events:
      - http:
          path: restaurant/{id}
          method: get

  randomRecommendation:
    handler: api/restaurants.getRandom
    events:
      - http:
          path: restaurant/random
          method: get

  UploadImage:
    handler: api/restaurants.uploadImage
    events:
      - http:
          path: restaurant/upload_img
          method: post
          cors: true

  RegisterUserToDynamoDB:
    handler: api/users.registerUserToDynamoDB
    description: Register user in DynamoDB after recieve cognito post confirmation event
    events:
      - cognitoUserPool:
          pool: LunchSquad
          trigger: PostConfirmation

plugins:
  - serverless-offline
